[
["estimating-one-and-two-means.html", "11 Estimating One and Two Means 11.1 Basic Model for Two Means 11.2 An Old Sleep Study 11.3 Looking at Likelihood 11.4 Exercises", " 11 Estimating One and Two Means 11.1 Basic Model for Two Means 11.1.1 Data Two variables metric reponse dichotomous explanatory 11.1.2 Model The traditional starting point for modeling means is to assume that the each group is sampled from a normal distribution with unknown mean and a common standard deviation. (We’ll see that is no harder to have different standard deviations.) So for two groups our model has three parameters: two means (\\(\\mu_1\\) and \\(\\mu_2\\)) and one standard deviation \\(\\sigma\\). Of course, we also need priors for these parameters. A common prior for the means is a normal distribution. We will start with a uniform prior for the standard deviation, but discuss better alternatives shortly. That gives the following template for our model: \\[\\begin{align*} Y_{ij} &amp; \\sim {\\sf Norm}(\\mu_i, \\sigma) \\\\ \\mu_i &amp; \\sim {\\sf Norm}(?, ?) \\\\ \\sigma &amp; \\sim {\\sf Unif}(?, ?) \\end{align*}\\] The questions marks will be filled in based on considerations of the scale (order of magnitude of the data) and the amount of regularizing we want to do. 11.2 An Old Sleep Study Cushny, A. R. and Peebles, A. R. (1905) “The action of optical isomers: II hyoscines.” The Journal of Physiology 32, 501–510. Design: Subjects sleep habits were compared without a sleep inducing drug and then with to see how two different drugs affected sleep. 11.2.1 Data Let’s look at the data. (extra = additional sleep on drug; group should really be drug, so let’s rename it.) library(ggformula) library(dplyr) sleep &lt;- datasets::sleep %&gt;% rename(drug = group) gf_boxplot(extra ~ drug, data = sleep) df_stats(extra ~ drug, data = sleep) drug min Q1 median Q3 max mean sd n missing 1 -1.6 -0.175 0.35 1.70 3.7 0.75 1.789 10 0 2 -0.1 0.875 1.75 4.15 5.5 2.33 2.002 10 0 11.2.2 Model It is simple enough to convert the model description above into a JAGS model, but we need to fill in those question marks. Let’s try this: mean for prior on \\(\\mu_i\\): 0 corresponds to the drug having no impact on sleep allows drug to increase or decrease sleep without prejudice any other number would require more justification will tend to pull estimates toward 0 (shrinkage) – we are requiring evidence to convince us that the drug does something to sleep. sd for prior on \\(\\mu_i\\): 3 Says we are 95% certain that the average impact of a drug will be betweeen -6 and 6 additional hours of sleep and that it is very unlikely the drug will change sleep by 9 or more hours. This is fairly week prior (6 extra hours of sleep would be a lot). This might be chosen in consultation with scientists who are more familiar with what is reasonable. range for \\(\\sigma\\): One crude way to set the prior is to give a ball mark estimate for the the standard deviation of the amount of sleep change in each treatment group and then make sure we cover a range 3 orders of maginitude in each direction. We can experiment with different priors to see how the impact results. library(R2jags) sleep_model &lt;- function() { for (i in 1:Nobs) { extra[i] ~ dnorm(mu[drug[i]], 1/sigma^2) } for (d in 1:Ndrugs) { mu[d] ~ dnorm(0, 1/3^2) # sd = 3 } sigma ~ dunif(2/1000, 2 * 1000) # 3 orders of mag each way of 2 delta &lt;- mu[2] - mu[1] tau &lt;- 1 / sigma^2 } sleep_jags &lt;- jags( model = sleep_model, parameters.to.save = c(&quot;mu&quot;, &quot;sigma&quot;, &quot;delta&quot;, &quot;tau&quot;), data = list( extra = sleep$extra, drug = sleep$drug, Nobs = nrow(sleep), Ndrugs = 2 ), DIC = FALSE # because we haven&#39;t discussed deviance yet ) ## module glm loaded ## module dic loaded sleep_jags ## Inference for Bugs model at &quot;/var/folders/py/txwd26jx5rq83f4nn0f5fmmm0000gn/T//RtmpL8aGIY/model8f6778776c81.txt&quot;, fit using jags, ## 3 chains, each with 2000 iterations (first 1000 discarded) ## n.sims = 3000 iterations saved ## mu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff ## delta 1.505 0.896 -0.309 0.933 1.523 2.075 3.269 1.001 3000 ## mu[1] 0.717 0.622 -0.518 0.315 0.723 1.131 1.962 1.001 3000 ## mu[2] 2.221 0.642 0.894 1.814 2.243 2.638 3.455 1.001 3000 ## sigma 2.035 0.379 1.455 1.772 1.980 2.237 2.905 1.003 820 ## tau 0.265 0.092 0.118 0.200 0.255 0.319 0.472 1.003 820 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). library(bayesplot) sleep_mcmc &lt;- as.mcmc(sleep_jags) mcmc_areas(sleep_mcmc, prob = 0.95) mcmc_pairs(sleep_mcmc) mosaic::prop( ~(delta &gt; 0), data = posterior(sleep_jags)) ## prop_TRUE ## 0.952 11.2.3 Separate standard deviations for each group sleep_model2 &lt;- function() { for (i in 1:Nobs) { extra[i] ~ dnorm(mu[drug[i]], 1/sigma[drug[i]]^2) } for (d in 1:Ndrugs) { mu[d] ~ dnorm(0, 1/3^2) sigma[d] ~ dunif(2/1000, 2 * 1000) tau[d] &lt;- 1 / sigma[d]^2 } delta &lt;- mu[2] - mu[1] } sleep_jags2 &lt;- jags( model = sleep_model2, parameters.to.save = c(&quot;mu&quot;, &quot;sigma&quot;, &quot;delta&quot;, &quot;tau&quot;), data = list( extra = sleep$extra, drug = sleep$drug, Nobs = nrow(sleep), Ndrugs = 2 ), DIC = FALSE ) library(bayesplot) library(CalvinBayes) sleep_jags2 ## Inference for Bugs model at &quot;/var/folders/py/txwd26jx5rq83f4nn0f5fmmm0000gn/T//RtmpL8aGIY/model8f67255f1424.txt&quot;, fit using jags, ## 3 chains, each with 2000 iterations (first 1000 discarded) ## n.sims = 3000 iterations saved ## mu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff ## delta 1.491 1.002 -0.523 0.853 1.513 2.140 3.451 1.001 3000 ## mu[1] 0.712 0.672 -0.586 0.286 0.701 1.136 2.061 1.001 3000 ## mu[2] 2.203 0.736 0.758 1.747 2.229 2.667 3.592 1.001 2600 ## sigma[1] 2.103 0.611 1.272 1.679 1.994 2.373 3.627 1.001 3000 ## sigma[2] 2.357 0.695 1.412 1.883 2.230 2.666 4.112 1.001 3000 ## tau[1] 0.278 0.140 0.076 0.178 0.251 0.355 0.618 1.001 3000 ## tau[2] 0.222 0.114 0.059 0.141 0.201 0.282 0.501 1.001 3000 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). sleep_mcmc2 &lt;- as.mcmc(sleep_jags2) mcmc_areas(sleep_mcmc2, prob = 0.95) mcmc_pairs(sleep_mcmc2) mosaic::prop( ~(delta &gt; 0), data = posterior(sleep_jags2)) ## prop_TRUE ## 0.9303 hdi(sleep_jags2, pars = c(&quot;delta&quot;)) par lo hi prob chain delta -0.5231 3.246 0.95 1 delta -0.4663 3.400 0.95 2 delta -0.5670 3.605 0.95 3 hdi(sleep_jags2) par lo hi prob chain delta -0.5231 3.2463 0.95 1 delta -0.4663 3.3997 0.95 2 delta -0.5670 3.6046 0.95 3 mu[1] -0.5609 1.9123 0.95 1 mu[1] -0.6925 1.9083 0.95 2 mu[1] -0.5055 2.2318 0.95 3 mu[2] 0.7860 3.5920 0.95 1 mu[2] 0.7949 3.5497 0.95 2 mu[2] 0.6776 3.6541 0.95 3 sigma[1] 1.1026 3.3793 0.95 1 sigma[1] 1.1953 3.1850 0.95 2 sigma[1] 1.1495 3.3457 0.95 3 sigma[2] 1.2549 3.6323 0.95 1 sigma[2] 1.3421 3.7643 0.95 2 sigma[2] 1.2385 3.7057 0.95 3 tau[1] 0.0485 0.5655 0.95 1 tau[1] 0.0605 0.5789 0.95 2 tau[1] 0.0601 0.5433 0.95 3 tau[2] 0.0345 0.4542 0.95 1 tau[2] 0.0460 0.4268 0.95 2 tau[2] 0.0494 0.4590 0.95 3 For those who know about 2-sample t tests: t.test(extra ~ drug, data = sleep) ## ## Welch Two Sample t-test ## ## data: extra by drug ## t = -1.9, df = 18, p-value = 0.08 ## alternative hypothesis: true difference in means is not equal to 0 ## 95 percent confidence interval: ## -3.3655 0.2055 ## sample estimates: ## mean in group 1 mean in group 2 ## 0.75 2.33 11.2.4 Paired Comparisons The data actually contain another variable: ID. As it turns out, the same ten people were tested with each drug. If we are primarily interested in comparing the two drugs, we might take the difference between the extra sleep with one drug and with the other drug for each person. This is referred to as a paired design. A paired comparison of means is really just looking at one mean – the mean difference. We can do this a couple of different ways: Compute the difference before giving data to JAGS Build the differences into the JAGS code. We will use option 1 here and convert our data so that each row corresponds to one person and there are separate columns for the extra sleep produced by each drug. This is sometimes referred to as converting from long format (more rows, fewer columns) to wide format (fewer rows, more columns). The tidyr::spread() funciton is useful for this. (And tidyr::gather() can be used to convert in the opposite direction.) library(tidyr) ## ## Attaching package: &#39;tidyr&#39; ## The following object is masked from &#39;package:Matrix&#39;: ## ## expand sleep_wide &lt;- datasets::sleep %&gt;% rename(drug = group) %&gt;% mutate(drug = paste0(&quot;drug&quot;, drug)) %&gt;% spread(key = drug, value = extra) sleep_wide ID drug1 drug2 1 0.7 1.9 2 -1.6 0.8 3 -0.2 1.1 4 -1.2 0.1 5 -0.1 -0.1 6 3.4 4.4 7 3.7 5.5 8 0.8 1.6 9 0.0 4.6 10 2.0 3.4 sleep_wide &lt;- sleep_wide %&gt;% mutate(delta = drug2 - drug1) sleep_wide ID drug1 drug2 delta 1 0.7 1.9 1.2 2 -1.6 0.8 2.4 3 -0.2 1.1 1.3 4 -1.2 0.1 1.3 5 -0.1 -0.1 0.0 6 3.4 4.4 1.0 7 3.7 5.5 1.8 8 0.8 1.6 0.8 9 0.0 4.6 4.6 10 2.0 3.4 1.4 gf_boxplot(~ delta, data = sleep_wide) sleep_model3 &lt;- function() { for (i in 1:Nsubj) { delta[i] ~ dnorm(mu, 1 / sigma^2) } mu ~ dnorm(0, 2) sigma ~ dunif(2/1000, 2 * 1000) tau &lt;- 1 / sigma^2 } sleep_jags3 &lt;- jags( model = sleep_model3, parameters.to.save = c(&quot;mu&quot;, &quot;sigma&quot;, &quot;tau&quot;), data = list( delta = sleep_wide$delta, Nsubj = nrow(sleep_wide) ), DIC = FALSE ) ## Compiling model graph ## Resolving undeclared variables ## Allocating nodes ## Graph information: ## Observed stochastic nodes: 10 ## Unobserved stochastic nodes: 2 ## Total graph size: 21 ## ## Initializing model library(bayesplot) library(CalvinBayes) sleep_jags3 ## Inference for Bugs model at &quot;/var/folders/py/txwd26jx5rq83f4nn0f5fmmm0000gn/T//RtmpL8aGIY/model8f67707afcf4.txt&quot;, fit using jags, ## 3 chains, each with 2000 iterations (first 1000 discarded) ## n.sims = 3000 iterations saved ## mu.vect sd.vect 2.5% 25% 50% 75% 97.5% Rhat n.eff ## mu 1.089 0.432 0.107 0.833 1.122 1.389 1.829 1.002 1500 ## sigma 1.514 0.471 0.884 1.191 1.426 1.730 2.747 1.001 3000 ## tau 0.549 0.296 0.133 0.334 0.492 0.705 1.279 1.001 3000 ## ## For each parameter, n.eff is a crude measure of effective sample size, ## and Rhat is the potential scale reduction factor (at convergence, Rhat=1). sleep_mcmc3 &lt;- as.mcmc(sleep_jags3) mcmc_areas(sleep_mcmc3, prob = 0.95) mcmc_pairs(sleep_mcmc3) mosaic::prop( ~(mu &gt; 0), data = posterior(sleep_jags3)) ## prop_TRUE ## 0.9857 hdi(sleep_jags3, pars = c(&quot;mu&quot;)) par lo hi prob chain mu 0.2199 1.893 0.95 1 mu 0.2474 1.926 0.95 2 mu 0.2238 1.856 0.95 3 hdi(sleep_jags3) par lo hi prob chain mu 0.2199 1.893 0.95 1 mu 0.2474 1.926 0.95 2 mu 0.2238 1.856 0.95 3 sigma 0.7694 2.429 0.95 1 sigma 0.7655 2.337 0.95 2 sigma 0.8394 2.395 0.95 3 tau 0.0816 1.134 0.95 1 tau 0.0936 1.119 0.95 2 tau 0.1104 1.102 0.95 3 11.3 Looking at Likelihood likelihood &lt;- function(mu, sigma, x, log = FALSE) { D &lt;- tibble( x = x, l = dnorm(x, mu, sigma, log = log), ) L &lt;- prod(dnorm(x, mu, sigma)) logL &lt;- sum(dnorm(x, mu, sigma, log = TRUE)) T &lt;- tibble(x = mean(x), logL = logL, height = 1.2 * dnorm(0, 0, 1, log = log)) cat(paste0(&quot;log likelihood: &quot;, format(logL)), &quot;; mu: &quot;, format(mu), &quot;; sigma: &quot;, format(sigma), &quot;\\n&quot;) gf_segment(0 + l ~ x + x, data = D, color = &quot;red&quot;) %&gt;% gf_point(0 ~ x, data = D, color = &quot;red&quot;) %&gt;% gf_function(function(x) dnorm(x, mu, sigma, log = log)) } library(manipulate) manipulate( likelihood(MU, SIGMA, c(8, 12), log = LOG) %&gt;% gf_lims(x = c(0, 20), y = c(NA, 0.5)), MU = slider(5, 15, 10, step = 0.2), SIGMA = slider(1, 10, 2, step = 0.2), LOG = checkbox(FALSE, &quot;log likelihood&quot;) ) 11.4 Exercises Fit a model that compares the mean height for men and women using the 30-year-olds in the NHANES data set (in the NHANES package) and answer the following questions about your model. Explain your choice of priors. Does this sample provide enough evidence to conclude that men are taller (on average)? Does this sample provide enough evidence to conclude that the standard deviation of height differs between men and women? Thirty &lt;- NHANES::NHANES %&gt;% filter(Age == 30) df_stats(Pulse ~ Gender, data = Thirty) Gender min Q1 median Q3 max mean sd n missing female 56 72 75 81.5 98 77.35 9.86 74 2 male 50 66 70 82.0 104 73.04 12.60 83 7 gf_dens( ~ Pulse, color = ~ Gender, data = Thirty, binwidth = 1) ## Warning: Removed 9 rows containing non-finite values (stat_density). "]
]
